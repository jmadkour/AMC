import streamlit as st
import pandas as pd
from openpyxl import load_workbook
import plotly.express as px
import io


# Fonction de traitement pour le fichier Excel
def process_excel(file):
    try:
        # Lire le fichier Excel sans header
        xls = pd.read_excel(file, header=None)
                
        # Trouver l'index de la ligne d'en-t√™te
        header_index = next(
            (idx for idx, row in xls.iterrows() if all(col in row.values for col in ['Code', 'Nom', 'Pr√©nom'])),
            None
        )
        
        if header_index is None:
            st.error("Les colonnes 'Code', 'Nom', 'Pr√©nom' sont introuvables dans le fichier.")
            return None, None
        
        # Red√©finir les en-t√™tes et supprimer les lignes pr√©c√©dentes
        xls.columns = xls.iloc[header_index]
        xls = xls.iloc[header_index + 1:].reset_index(drop=True)
        
        # V√©rification si le fichier est vide apr√®s nettoyage
        if xls.empty:
            st.error("Aucune donn√©e valide apr√®s le traitement des lignes.")
            return None, None
        
        # V√©rification des colonnes n√©cessaires (double v√©rification)
        required_columns = ['Nom', 'Pr√©nom', 'Code']
        missing = [col for col in required_columns if col not in xls.columns]
        if missing:
            st.error(f"Colonnes manquantes apr√®s traitement : {', '.join(missing)}")
            return None, None
        
        # Nettoyage des donn√©es
        liste = xls.dropna(subset=['Nom', 'Pr√©nom', 'Code'])
        liste['Name'] = liste['Code'].astype(str) + ' ' + liste['Nom'] + ' ' + liste['Pr√©nom']
        liste = liste[['Code', 'Name']].drop_duplicates()
        return xls, liste
    
    except Exception as e:
        st.error(f"Erreur lors du traitement du fichier Excel : {str(e)}")
        st.info("Assurez-vous que le fichier est bien format√© et contient les colonnes requises.")
        return None, 

# Fonction de traitement pour le fichier CSV
def process_csv2excel(xls_file, csv_file):
    try:
        csv = pd.read_csv(csv_file, delimiter=';', encoding='utf-8')

        # Nettoyer les donn√©es : supprimer les lignes o√π 'A:Code' == 'NONE'
        anomalies = csv[csv['A:Code'] == 'NONE'].copy()
        csv_clean = csv[csv['A:Code'] != 'NONE'].copy()

        # V√©rifier si le fichier nettoy√© est vide
        if csv_clean.empty:
            print("Aucune donn√©e valide apr√®s le nettoyage !")

        # Construire le dictionnaire Notes
        notes_etudiants = {row['A:Code'].strip().upper(): row['Note'] for _, row in csv_clean.iterrows()}
        notes_etudiants = {int(cle): valeur for cle, valeur in notes_etudiants.items()}

        wb = load_workbook(filename=xls_file)
        sheet = wb.active # ou workbook['Nom_de_la_feuille']
        cell_row = None
        cell_column = None

        # Parcourir toutes les lignes et colonnes de la feuille de calcul
        for row in sheet.iter_rows():
            for cell in row:
                if cell.value == 'Note':  # V√©rifier si la valeur de la cellule est 'Note'
                    cell_row = cell.row  # Ligne de la cellule
                    cell_column = cell.column  # Colonne de la cellule
                    #st.success(
                    #    f"L'en-t√™te 'Note' a √©t√© trouv√©e √† la ligne {cell_row}, colonne {cell_column} ({cell.coordinate}).")
                    break  # Sortir de la boucle interne apr√®s avoir trouv√© la valeur
            if cell_row is not None and cell_column is not None:
                break  # Sortir de la boucle externe apr√®s avoir trouv√© la valeur

        # Si la valeur n'a pas √©t√© trouv√©e
        if cell_row is None and cell_column is None:
            st.warning("La cha√Æne 'Note' n'a pas √©t√© trouv√©e dans le fichier.")

        # Parcourir les lignes du fichier Excel
        for row in sheet.iter_rows(min_row=cell_row, max_col=cell_column, values_only=False):  # Ignorer l'en-t√™te
            code_etudiant_cell = row[0]  # Colonne des codes d'√©tudiants (premi√®re colonne)
            note_cell = row[cell_column-1]  # Colonne des notes (deuxi√®me colonne)

            # V√©rifier si le code √©tudiant existe dans le dictionnaire
            if code_etudiant_cell.value in notes_etudiants:
                note_cell.value = notes_etudiants[code_etudiant_cell.value]

        # Enregistrer les modifications dans le fichier Excel
        wb.save(xls_file)
        wb.close()
        return xls_file, len(anomalies)

    except Exception as e:
        st.error(f"Erreur lors du traitement du fichier Excel : {str(e)}")
        st.error("Assurez-vous que le fichier est bien format√© et contient les colonnes requises.")
        return None, None



# ----------------- Interface utilisateur -----------------
st.title("üõ†Ô∏è Outils pour AMC")

# Sidebar pour les sections
section = st.sidebar.radio(" ", ["√âtudiants", "Notes", "Statistiques"])

if section == "√âtudiants":
    st.header("üë®‚Äçüéì Liste des √©tudiants")
    st.info(
        """
        T√©l√©charger le fichier Excel de l'administration.
        """
    )
    
    uploaded_excel_file = st.file_uploader(
        " ",
        type="xlsx", 
        key="excel_uploader"
    )
    
    if uploaded_excel_file is not None:
        with st.spinner("Traitement automatique du fichier Excel en cours..."):
            xls, liste = process_excel(uploaded_excel_file)
            
            if xls is not None:
                st.success(f"Lecture du fichier Excel r√©ussie ! {len(xls)} √©tudiants trouv√©s.")  
                st.write("üîé Aper√ßu de la base de donn√©es des √©tudiants:")
                st.write(xls.head(10))              
                st.write("üîé Aper√ßu de la liste des √©tudiants √† fournir √† AMC:")
                st.write(liste.head(10))
                st.success(f"La liste contient {len(xls)} √©tudiants.")
                # G√©n√©rer le fichier CSV
                csv_data = liste.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="üì• T√©l√©charger la liste des √©tudiants au format CSV",
                    data=csv_data,
                    file_name="liste_etudiants.csv",
                    mime="text/csv"
                )

elif section == "Notes":
    st.header("‚úçÔ∏è Traitement des notes")
    st.info(
        """
        T√©l√©charger le fichier Excel de l'administration.
        """
    )
    xls_file = st.file_uploader(
        " ",
        type="xlsx", 
        key="excel_uploader2"
    )

    st.info(
        """
        T√©l√©charger le fichier CSV des notes calcul√©es par AMC
        """
    )
    csv_file = st.file_uploader(
        "",
        type="csv", 
        key="csv_uploader"
    )
    if xls_file is not None and csv_file is not None:
        with st.spinner("Traitement automatique du fichier Excel en cours..."):
            # Lire le contenu du fichier CSV en m√©moire
            csv_content = io.BytesIO(csv_file.getvalue())

            # Lire le contenu du fichier Excel en m√©moire
            xls_content = io.BytesIO(xls_file.getvalue())

            # Traitez les fichiers avec process_csv2excel
            processed_xls, nb_none = process_csv2excel(xls_content, csv_content)

        if processed_xls is not None:
            # Lire le fichier Excel trait√©
            wb = load_workbook(processed_xls)
            output = io.BytesIO()
            wb.save(output)  # Sauvegardez le fichier dans un flux binaire
            wb.close()

            # R√©initialisez le curseur du flux binaire
            output.seek(0)

            # Encodez le contenu en base64 pour le t√©l√©chargement
            file_data = output.getvalue()

            # Ajoutez un bouton de t√©l√©chargement
            st.success("‚úÖ F√©licitations ! Les notes ont √©t√© saisies avec succ√®s.")
            file_name = st.text_input("Saisir le nom du fichier Excel de l'adminstration sans l'extension '.xlsx' puis valider.")
            st.download_button(
                label="üì• T√©l√©charger le fichier Excel trait√©",
                data=file_data,
                file_name=file_name + ".xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        if nb_none > 0:
            st.warning(f"Attention! {nb_none} √©tudiants ont √©t√© mal identifi√©s. V√©rifiez leurs copies.")

elif section == "Statistiques":
    st.header("üìä Statistiques des notes")
    st.info(
        """
        T√©l√©charger le fichier Excel de l'administration.
        """
    )
    uploaded_excel_file2 = st.file_uploader(
        " ",
        type="xlsx", 
        key="excel_uploader2"
    )
    st.info(
        """
        T√©l√©charger le fichier CSV des notes calcul√©es par AMC.
        """
    )
    uploaded_csv_file = st.file_uploader(
        " ",
        type="csv", 
        key="csv_uploader"
    )
    if uploaded_excel_file2 is not None:
        with st.spinner("Traitement automatique du fichier Excel en cours..."):
            xls, liste = process_excel(uploaded_excel_file2)
    if uploaded_csv_file is not None and uploaded_excel_file2 is not None:
        with st.spinner("Int√©gration des notes aux √©tudiants..."):
            csv_clean, anomalies, Notes = process_csv(uploaded_csv_file)
                
            # G√©n√©rer le fichier Excel final avec en-t√™te personnalis√©
            if Notes is not None:
                # Mettre √† jour le fichier Excel avec les notes
                updated_df = update_excel_with_notes(uploaded_excel_file2, Notes)

            st.info(
                """
                Quelques statistiques sur les notes.
                """
            )
            # Affichage des statistiques
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Effectif total", len(xls) if xls is not None else 0)
            with col2:
                st.metric("Pr√©sents", len(csv_clean) if csv_clean is not None else 0)
            with col3:
                st.metric("Taux de r√©ussite (%)", round((csv_clean['Note'] >= 10).mean()*100,2)
 if xls is not None and csv_clean is not None else 0)
            with col4:
                st.metric("Mal identifi√©s", len(anomalies) if anomalies is not None else 0)


            # Calcul des effectifs
            effectifs = csv_clean['Note'].value_counts().reset_index()#.sort_index()
            modalites = csv_clean['Note'].unique()
            effectifs.columns = ['Valeur', 'Effectif']


            # Cr√©ation du graphique Plotly avec les effectifs affich√©s sur les barres
            fig = px.bar(effectifs,
                x='Valeur',
                y='Effectif',
                title=" ",
                labels={'Valeur': 'Notes', 'Effectif': 'Effectifs'},
                text_auto=True
            )

            # Personnalisation du layout
            fig.update_layout(
                 title_font_size=20,
                 xaxis_title_font=dict(size=14),
                 yaxis_title_font=dict(size=14),
                 showlegend=False
            )

            # Ajuster la position et le style des √©tiquettes (optionnel)
            fig.update_traces(textfont_size=14, textangle=0, textposition="outside", width=0.5)
            fig.update_xaxes(tickmode='array', tickvals=list(range(21)), ticktext=[str(i) for i in range(21)])
            fig.update_layout(width=800, height=600)

            st.info(
                """
                Distribution des notes.
                """
            )

            st.plotly_chart(fig)

            # Slider pour ajouter des points
            ajout_points = st.slider("Ajouter des points", min_value=0.0, max_value=5.0, value=0.0, step=0.5)

            if ajout_points > 0:
                csv_plus = csv_clean.copy()

                st.info(
                    """
                    Simulation de la distribution des notes et du taux de r√©ussite apr√®s ajout de points.
                    """
                )

                # Ajout des points avec validation (limite maximale de 20)
                csv_plus['Note'] = csv_plus['Note'].apply(lambda x: min(x + ajout_points, 20))

                # Calcul des effectifs apr√®s modification
                effectifs_plus = csv_plus['Note'].value_counts().reset_index()
                effectifs_plus.columns = ['Valeur', 'Effectif']

                # Cr√©ation du graphique Plotly avec les effectifs affich√©s sur les barres
                fig_plus = px.bar(
                    effectifs_plus,
                    x='Valeur',
                    y='Effectif',
                    title=" ",
                    labels={'Valeur': 'Notes', 'Effectif': 'Effectifs'},
                    text_auto=True
                )

                # Personnalisation du layout
                fig_plus.update_layout(
                    title_font_size=20,
                    xaxis_title_font=dict(size=14),
                    yaxis_title_font=dict(size=14),
                    showlegend=False
                )

                # Ajuster la position et le style des √©tiquettes
                fig_plus.update_traces(textfont_size=14, textangle=0, textposition="outside", width=0.5)

                # Configuration de l'axe des abscisses pour inclure toutes les valeurs de 0 √† 20
                fig_plus.update_xaxes(tickmode='array', tickvals=list(range(21)), ticktext=[str(i) for i in range(21)])

                # D√©finir la taille du graphique
                fig_plus.update_layout(width=800, height=600)

                # Affichage du taux de r√©ussite mis √† jour
                st.metric("Nouveau taux de r√©ussite (%)", round((csv_plus['Note'] >= 10).mean() * 100, 2))

                # Affichage du graphique
                st.plotly_chart(fig_plus)
